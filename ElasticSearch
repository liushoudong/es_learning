ElasticSearch

文档Document
  Elasticsearch是面向文档的，文档是所有可搜索数据的最小单位
  文档会被序列化成Json格式，保存在Elasticsearch中
    Json对象由字段组成；每个字段都有对应的字段类型(字符串/数值/布尔/日期/二进制/范围类型)
  每个文档都有一个Unique ID
    可以自己指定id，或者通过Elasticsearch自动生成
  Json文档
    一篇文档包含了一系列的字段，类似数据库表中一条记录
    Json文档，格式灵活，不需要预先定义格式
      字段的类型可以指定或者通过Elasticsearch自动推算，支持数组/支持嵌套
  文档的元数据
    元数据，用于标注文档的相关信息
      _index - 文档所属的索引名
      _type - 文档所属的类型名
      _id - 文档唯一ID
      _source - 文档的原始Json数据
      _all - 整合所有字段内容到改字段，已被废除
      _version - 文档的版本信息
      _score - 相关性打分
      
   索引
    Index - 索引是文档的容器，是一类文档的结合
      Index体现了逻辑空间的概念，每个索引都有自己的Mapping定义，用于定义包含的文档的字段名和字段类型
      Shard体现了物理空间的概念，索引中的数据分散在Shard上
    索引的Mapping与Settings
      Mapping定义文档字段的类型
      Settings定义不同的数据分布
    索引的不同语意
      名词：一个Elasticsearch集群中，可以创建很多个不同的索引
      动词：保存一个文档到Elasticsearch的过程也叫索引(indexing) ES中，创建一个倒排索引的过程
      抛开ES 名词：一个B树索引，一个倒排索引
   
   Type
      在7.0之前，一个Index可以设置多个Types
      6.0开始，Type已经被Deprecated。7.0开始一个索引只能创建一个Type - "_doc"
    
    抽象与类比
      RDBMS              Elasticsearch
      Table                Index(Type)
      Row                  Document
      Column               Filed
      Schema               Mapping
      SQL                  DSL
      
      传统关系型数据库和Elasticsearch的区别
        Elasticsearch-Schemaless 相关性 高性能全文检索
        RDMS 事务性 Join
        
      一些基本的API
        Indices
          创建Index - PUT Movies
          查看所有Index - _cat/indices
          
    节点、集群、分片及副本
      节点
        节点是一个Elasticsearch的实例
          本质上就是一个JAVA进程
        每一个节点都有名字，通过配置文件配置，或者启动时候-E node.name=node1指定
        每一个节点在启动之后，会分配一个UID，保存在data目录下
        
    Master-eligible nodes和 Master Node
      每个节点启动后，默认就是一个Master eligible节点
        可以设置node.master:false禁止
        
    Data Node 和 Coordinating Node
      Data Node
        可以保存数据的节点，叫做Data Node。负责保存分片数据，在数据扩展上起到了至关重要的作用
      Coordinating Node
        负责接受Client的请求，将请求分发到合适的节点，最终把结果汇集到一起
        每个节点默认都起到了Coordinating Node的职责
        
        
    文档的基本CRUD与批量操作
      支持自动生成文档ID和指定文档ID两种方式
      通过调用"post/索引名称/_doc" 系统会自动生成document id
      
      Get一个文档
        找到文档，返回http 200
          文档元信息
            _index / _type /
            版本信息，同一个id的文档，即使被删除，Version也会不断增加
            _source中默认包含了文档的所有原始信息
        找不到文档返回http 404
      
      
      
      
